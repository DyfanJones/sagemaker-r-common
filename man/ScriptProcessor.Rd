% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processing.R
\name{ScriptProcessor}
\alias{ScriptProcessor}
\title{Script Processor class}
\description{
Handles Amazon SageMaker processing tasks for jobs using a machine learning framework.
}
\seealso{
Other Processor: 
\code{\link{ProcessingInput}},
\code{\link{ProcessingJob}},
\code{\link{ProcessingOutput}},
\code{\link{Processor}}
}
\concept{Processor}
\section{Super class}{
\code{\link[sagemaker.common:Processor]{sagemaker.common::Processor}} -> \code{ScriptProcessor}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ScriptProcessor-new}{\code{ScriptProcessor$new()}}
\item \href{#method-ScriptProcessor-get_run_args}{\code{ScriptProcessor$get_run_args()}}
\item \href{#method-ScriptProcessor-run}{\code{ScriptProcessor$run()}}
\item \href{#method-ScriptProcessor-clone}{\code{ScriptProcessor$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="sagemaker.common" data-topic="Processor" data-id="format"><a href='../../sagemaker.common/html/Processor.html#method-Processor-format'><code>sagemaker.common::Processor$format()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScriptProcessor-new"></a>}}
\if{latex}{\out{\hypertarget{method-ScriptProcessor-new}{}}}
\subsection{Method \code{new()}}{
Initializes a ``ScriptProcessor`` instance. The ``ScriptProcessor``
             handles Amazon SageMaker Processing tasks for jobs using a machine learning framework,
             which allows for providing a script to be run as part of the Processing Job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScriptProcessor$new(
  role,
  image_uri,
  command,
  instance_count,
  instance_type,
  volume_size_in_gb = 30,
  volume_kms_key = NULL,
  output_kms_key = NULL,
  max_runtime_in_seconds = NULL,
  base_job_name = NULL,
  sagemaker_session = NULL,
  env = NULL,
  tags = NULL,
  network_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role name or ARN. Amazon SageMaker Processing
uses this role to access AWS resources, such as
data stored in Amazon S3.}

\item{\code{image_uri}}{(str): The URI of the Docker image to use for the
processing jobs.}

\item{\code{command}}{([str]): The command to run, along with any command-line flags.
Example: ["python3", "-v"].}

\item{\code{instance_count}}{(int): The number of instances to run
a processing job with.}

\item{\code{instance_type}}{(str): The type of EC2 instance to use for
processing, for example, 'ml.c4.xlarge'.}

\item{\code{volume_size_in_gb}}{(int): Size in GB of the EBS volume
to use for storing data during processing (default: 30).}

\item{\code{volume_kms_key}}{(str): A KMS key for the processing
volume (default: NULL).}

\item{\code{output_kms_key}}{(str): The KMS key ID for processing job outputs (default: NULL).}

\item{\code{max_runtime_in_seconds}}{(int): Timeout in seconds (default: NULL).
After this amount of time, Amazon SageMaker terminates the job,
regardless of its current status. If `max_runtime_in_seconds` is not
specified, the default value is 24 hours.}

\item{\code{base_job_name}}{(str): Prefix for processing name. If not specified,
the processor generates a default job name, based on the
processing image name and current timestamp.}

\item{\code{sagemaker_session}}{(:class:`~sagemaker.session.Session`):
Session object which manages interactions with Amazon SageMaker and
any other AWS services needed. If not specified, the processor creates
one using the default AWS configuration chain.}

\item{\code{env}}{(dict[str, str]): Environment variables to be passed to
the processing jobs (default: NULL).}

\item{\code{tags}}{(list[dict]): List of tags to be passed to the processing job
(default: NULL). For more, see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}

\item{\code{network_config}}{(:class:`~sagemaker.network.NetworkConfig`):
A :class:`~sagemaker.network.NetworkConfig`
object that configures network isolation, encryption of
inter-container traffic, security group IDs, and subnets.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScriptProcessor-get_run_args"></a>}}
\if{latex}{\out{\hypertarget{method-ScriptProcessor-get_run_args}{}}}
\subsection{Method \code{get_run_args()}}{
Returns a RunArgs object.
             For processors (:class:`~sagemaker.spark.processing.PySparkProcessor`,
             :class:`~sagemaker.spark.processing.SparkJar`) that have special
             run() arguments, this object contains the normalized arguments for passing to
             :class:`~sagemaker.workflow.steps.ProcessingStep`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScriptProcessor$get_run_args(
  code,
  inputs = NULL,
  outputs = NULL,
  arguments = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(str): This can be an S3 URI or a local path to a file with the framework
script to run.}

\item{\code{inputs}}{(list[:class:`~sagemaker.processing.ProcessingInput`]): Input files for
the processing job. These must be provided as
:class:`~sagemaker.processing.ProcessingInput` objects (default: None).}

\item{\code{outputs}}{(list[:class:`~sagemaker.processing.ProcessingOutput`]): Outputs for
the processing job. These can be specified as either path strings or
:class:`~sagemaker.processing.ProcessingOutput` objects (default: None).}

\item{\code{arguments}}{(list[str]): A list of string arguments to be passed to a
processing job (default: None).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScriptProcessor-run"></a>}}
\if{latex}{\out{\hypertarget{method-ScriptProcessor-run}{}}}
\subsection{Method \code{run()}}{
Runs a processing job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScriptProcessor$run(
  code,
  inputs = NULL,
  outputs = NULL,
  arguments = NULL,
  wait = TRUE,
  logs = TRUE,
  job_name = NULL,
  experiment_config = NULL,
  kms_key = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(str): This can be an S3 URI or a local path to
a file with the framework script to run.}

\item{\code{inputs}}{(list[:class:`~sagemaker.processing.ProcessingInput`]): Input files for
the processing job. These must be provided as
:class:`~sagemaker.processing.ProcessingInput` objects (default: NULL).}

\item{\code{outputs}}{(list[:class:`~sagemaker.processing.ProcessingOutput`]): Outputs for
the processing job. These can be specified as either path strings or
:class:`~sagemaker.processing.ProcessingOutput` objects (default: NULL).}

\item{\code{arguments}}{(list[str]): A list of string arguments to be passed to a
processing job (default: NULL).}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes (default: True).}

\item{\code{logs}}{(bool): Whether to show the logs produced by the job.
Only meaningful when wait is True (default: True).}

\item{\code{job_name}}{(str): Processing job name. If not specified, the processor generates
a default job name, based on the base job name and current timestamp.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys:
'ExperimentName', 'TrialName', and 'TrialComponentDisplayName'.}

\item{\code{kms_key}}{(str): The ARN of the KMS key that is used to encrypt the
user code file (default: None).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScriptProcessor-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ScriptProcessor-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScriptProcessor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
