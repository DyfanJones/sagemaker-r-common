% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugger_metrics_config.R
\name{MetricsConfigBase}
\alias{MetricsConfigBase}
\title{The base class for the metrics configuration.}
\description{
It determines the step or time range that needs to be
             profiled and validates the input value pairs. Available profiling range parameter pairs are
             (\code{start_step} and \code{num_steps}) and (\code{start_unix_time} and \code{duration}).
             The two parameter pairs are mutually exclusive, and this class validates
             if one of the two pairs is used. If both pairs are specified, a
             FOUND_BOTH_STEP_AND_TIME_FIELDS error occurs.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{MetricsConfigBase$new()}}
\item \href{#method-to_json_string}{\code{MetricsConfigBase$to_json_string()}}
\item \href{#method-format}{\code{MetricsConfigBase$format()}}
\item \href{#method-clone}{\code{MetricsConfigBase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Validate the provided range fields and set the range to be profiled accordingly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetricsConfigBase$new(
  name,
  start_step = NULL,
  num_steps = NULL,
  start_unix_time = NULL,
  duration = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): The name of the metrics config.}

\item{\code{start_step}}{(int): The step to start profiling.}

\item{\code{num_steps}}{(int): The number of steps to profile.}

\item{\code{start_unix_time}}{(int): The Unix time to start profiling.}

\item{\code{duration}}{(float): The duration in seconds to profile.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_json_string"></a>}}
\if{latex}{\out{\hypertarget{method-to_json_string}{}}}
\subsection{Method \code{to_json_string()}}{
Convert this metrics configuration to dictionary formatted as a string.
             Calling eval on the
             return value is the same as calling _to_json directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetricsConfigBase$to_json_string()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: This metrics configuration as a dictionary and formatted as a string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetricsConfigBase$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetricsConfigBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
