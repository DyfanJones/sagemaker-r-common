% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processing.R
\name{Processor}
\alias{Processor}
\title{Processor Class}
\description{
Handles Amazon SageMaker Processing tasks.
}
\seealso{
Other Processor: 
\code{\link{ProcessingInput}},
\code{\link{ProcessingJob}},
\code{\link{ProcessingOutput}},
\code{\link{ScriptProcessor}}
}
\concept{Processor}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{role}}{An AWS IAM role name or ARN}

\item{\code{image_uri}}{The URI of the Docker image to use}

\item{\code{instance_count}}{The number of instances to run}

\item{\code{instance_type}}{The type of EC2 instance to use}

\item{\code{entrypoint}}{The entrypoint for the processing job}

\item{\code{volume_size_in_gb}}{Size in GB of the EBS volume}

\item{\code{volume_kms_key}}{A KMS key for the processing}

\item{\code{output_kms_key}}{The KMS key ID for processing job outputs}

\item{\code{max_runtime_in_seconds}}{Timeout in seconds}

\item{\code{base_job_name}}{Prefix for processing job name}

\item{\code{sagemaker_session}}{Session object which manages interactions with Amazon SageMaker}

\item{\code{env}}{Environment variables}

\item{\code{tags}}{List of tags to be passed}

\item{\code{network_config}}{A :class:`~sagemaker.network.NetworkConfig`}

\item{\code{jobs}}{Jobs ran /running}

\item{\code{latest_job}}{Previously ran jobs}

\item{\code{.current_job_name}}{Current job}

\item{\code{arguments}}{extra agruments}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Processor$new()}}
\item \href{#method-run}{\code{Processor$run()}}
\item \href{#method-format}{\code{Processor$format()}}
\item \href{#method-clone}{\code{Processor$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes a ``Processor`` instance. The ``Processor`` handles Amazon
             SageMaker Processing tasks.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Processor$new(
  role,
  image_uri,
  instance_count,
  instance_type,
  entrypoint = NULL,
  volume_size_in_gb = 30,
  volume_kms_key = NULL,
  output_kms_key = NULL,
  max_runtime_in_seconds = NULL,
  base_job_name = NULL,
  sagemaker_session = NULL,
  env = NULL,
  tags = NULL,
  network_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role name or ARN. Amazon SageMaker Processing
uses this role to access AWS resources, such as
data stored in Amazon S3.}

\item{\code{image_uri}}{(str): The URI of the Docker image to use for the
processing jobs.}

\item{\code{instance_count}}{(int): The number of instances to run
a processing job with.}

\item{\code{instance_type}}{(str): The type of EC2 instance to use for
processing, for example, 'ml.c4.xlarge'.}

\item{\code{entrypoint}}{(list[str]): The entrypoint for the processing job (default: NULL).
This is in the form of a list of strings that make a command.}

\item{\code{volume_size_in_gb}}{(int): Size in GB of the EBS volume
to use for storing data during processing (default: 30).}

\item{\code{volume_kms_key}}{(str): A KMS key for the processing
volume (default: NULL).}

\item{\code{output_kms_key}}{(str): The KMS key ID for processing job outputs (default: NULL).}

\item{\code{max_runtime_in_seconds}}{(int): Timeout in seconds (default: NULL).
After this amount of time, Amazon SageMaker terminates the job,
regardless of its current status. If `max_runtime_in_seconds` is not
specified, the default value is 24 hours.}

\item{\code{base_job_name}}{(str): Prefix for processing job name. If not specified,
the processor generates a default job name, based on the
processing image name and current timestamp.}

\item{\code{sagemaker_session}}{(:class:`~sagemaker.session.Session`):
Session object which manages interactions with Amazon SageMaker and
any other AWS services needed. If not specified, the processor creates
one using the default AWS configuration chain.}

\item{\code{env}}{(dict[str, str]): Environment variables to be passed to
the processing jobs (default: NULL).}

\item{\code{tags}}{(list[dict]): List of tags to be passed to the processing job
(default: NULL). For more, see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}

\item{\code{network_config}}{(:class:`~sagemaker.network.NetworkConfig`):
A :class:`~sagemaker.network.NetworkConfig`
object that configures network isolation, encryption of
inter-container traffic, security group IDs, and subnets.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Runs a processing job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Processor$run(
  inputs = NULL,
  outputs = NULL,
  arguments = NULL,
  wait = TRUE,
  logs = TRUE,
  job_name = NULL,
  experiment_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(list[:class:`~sagemaker.processing.ProcessingInput`]): Input files for
the processing job. These must be provided as
:class:`~sagemaker.processing.ProcessingInput` objects (default: NULL).}

\item{\code{outputs}}{(list[:class:`~sagemaker.processing.ProcessingOutput`]): Outputs for
the processing job. These can be specified as either path strings or
:class:`~sagemaker.processing.ProcessingOutput` objects (default: NULL).}

\item{\code{arguments}}{(list[str]): A list of string arguments to be passed to a
processing job (default: NULL).}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes (default: True).}

\item{\code{logs}}{(bool): Whether to show the logs produced by the job.
Only meaningful when ``wait`` is True (default: True).}

\item{\code{job_name}}{(str): Processing job name. If not specified, the processor generates
a default job name, based on the base job name and current timestamp.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys:
'ExperimentName', 'TrialName', and 'TrialComponentDisplayName'.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Processor$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Processor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
