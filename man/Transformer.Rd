% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transformer.R
\name{Transformer}
\alias{Transformer}
\title{Transformer class}
\description{
A class for handling creating and interacting with Amazon SageMaker
             transform jobs
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Transformer$new()}}
\item \href{#method-transform}{\code{Transformer$transform()}}
\item \href{#method-delete_model}{\code{Transformer$delete_model()}}
\item \href{#method-wait}{\code{Transformer$wait()}}
\item \href{#method-stop_transform_job}{\code{Transformer$stop_transform_job()}}
\item \href{#method-attach}{\code{Transformer$attach()}}
\item \href{#method-format}{\code{Transformer$format()}}
\item \href{#method-clone}{\code{Transformer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a ``Transformer``.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$new(
  model_name,
  instance_count,
  instance_type,
  strategy = NULL,
  assemble_with = NULL,
  output_path = NULL,
  output_kms_key = NULL,
  accept = NULL,
  max_concurrent_transforms = NULL,
  max_payload = NULL,
  tags = NULL,
  env = NULL,
  base_transform_job_name = NULL,
  sagemaker_session = NULL,
  volume_kms_key = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_name}}{(str): Name of the SageMaker model being used for the
transform job.}

\item{\code{instance_count}}{(int): Number of EC2 instances to use.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use, for example,
'ml.c4.xlarge'.}

\item{\code{strategy}}{(str): The strategy used to decide how to batch records in
a single request (default: None). Valid values: 'MultiRecord'
and 'SingleRecord'.}

\item{\code{assemble_with}}{(str): How the output is assembled (default: None).
Valid values: 'Line' or 'None'.}

\item{\code{output_path}}{(str): S3 location for saving the transform result. If
not specified, results are stored to a default bucket.}

\item{\code{output_kms_key}}{(str): Optional. KMS key ID for encrypting the
transform output (default: None).}

\item{\code{accept}}{(str): The accept header passed by the client to
the inference endpoint. If it is supported by the endpoint,
it will be the format of the batch transform output.}

\item{\code{max_concurrent_transforms}}{(int): The maximum number of HTTP requests
to be made to each individual transform container at one time.}

\item{\code{max_payload}}{(int): Maximum size of the payload in a single HTTP
request to the container in MB.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a transform job
(default: None). For more, see the SageMaker API documentation for
`Tag <https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html>`_.}

\item{\code{env}}{(dict): Environment variables to be set for use during the
transform job (default: None).}

\item{\code{base_transform_job_name}}{(str): Prefix for the transform job when the
:meth:`~sagemaker.transformer.Transformer.transform` method
launches. If not specified, a default prefix will be generated
based on the training image name that was used to train the
model associated with the transform job.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, the estimator creates one
using the default AWS configuration chain.}

\item{\code{volume_kms_key}}{(str): Optional. KMS key ID for encrypting the volume
attached to the ML compute instance (default: None).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transform"></a>}}
\if{latex}{\out{\hypertarget{method-transform}{}}}
\subsection{Method \code{transform()}}{
Start a new transform job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$transform(
  data,
  data_type = "S3Prefix",
  content_type = NULL,
  compression_type = NULL,
  split_type = NULL,
  job_name = NULL,
  input_filter = NULL,
  output_filter = NULL,
  join_source = NULL,
  experiment_config = NULL,
  wait = FALSE,
  logs = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(str): Input data location in S3.}

\item{\code{data_type}}{(str): What the S3 location defines (default: 'S3Prefix').
Valid values:
\itemize{
  \item{\strong{'S3Prefix'} - the S3 URI defines a key name prefix. All objects with this prefix
will be used as inputs for the transform job.}
  \item{\strong{'ManifestFile'} - the S3 URI points to a single manifest file listing each S3
object to use as an input for the transform job.}}}

\item{\code{content_type}}{(str): MIME type of the input data (default: None).}

\item{\code{compression_type}}{(str): Compression type of the input data, if
compressed (default: None). Valid values: 'Gzip', None.}

\item{\code{split_type}}{(str): The record delimiter for the input object
(default: 'None'). Valid values: 'None', 'Line', 'RecordIO', and
'TFRecord'.}

\item{\code{job_name}}{(str): job name (default: None). If not specified, one will
be generated.}

\item{\code{input_filter}}{(str): A JSONPath to select a portion of the input to
pass to the algorithm container for inference. If you omit the
field, it gets the value '$', representing the entire input.
For CSV data, each row is taken as a JSON array,
so only index-based JSONPaths can be applied, e.g. $[0], $[1:].
CSV data should follow the `RFC format <https://tools.ietf.org/html/rfc4180>`_.
See `Supported JSONPath Operators
<https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators>`_
for a table of supported JSONPath operators.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.features" (default: None).}

\item{\code{output_filter}}{(str): A JSONPath to select a portion of the
joined/original output to return as the output.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.prediction" (default: None).}

\item{\code{join_source}}{(str): The source of data to be joined to the transform
output. It can be set to 'Input' meaning the entire input record
will be joined to the inference result. You can use OutputFilter
to select the useful portion before uploading to S3. (default:
None). Valid values: Input, None.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys,
'ExperimentName', 'TrialName', and 'TrialComponentDisplayName'.
(default: ``None``).}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes
(default: False).}

\item{\code{logs}}{(bool): Whether to show the logs produced by the job.
Only meaningful when wait is True (default: False).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisible
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_model"></a>}}
\if{latex}{\out{\hypertarget{method-delete_model}{}}}
\subsection{Method \code{delete_model()}}{
Delete the corresponding SageMaker model for this Transformer.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$delete_model()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-wait"></a>}}
\if{latex}{\out{\hypertarget{method-wait}{}}}
\subsection{Method \code{wait()}}{
Wait for latest running batch transform job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$wait(logs = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{logs}}{return logs}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop_transform_job"></a>}}
\if{latex}{\out{\hypertarget{method-stop_transform_job}{}}}
\subsection{Method \code{stop_transform_job()}}{
Stop latest running batch transform job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$stop_transform_job(wait = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{wait for transform job}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-attach"></a>}}
\if{latex}{\out{\hypertarget{method-attach}{}}}
\subsection{Method \code{attach()}}{
Attach an existing transform job to a new Transformer instance
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$attach(transform_job_name, sagemaker_session = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transform_job_name}}{(str): Name for the transform job to be attached.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, one will be created using
the default AWS configuration chain.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Transformer (class): The Transformer instance with the
             specified transform job attached.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Transformer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
